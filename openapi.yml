openapi: 3.1.0
info:
  title: Link Apis
  contact:
    email: chenyunda218@gmail.com
  version: 1.0.0
servers:
  - url: https://space.api.uat.alterminal.com
    description: dev
  - url: https://space.api.alterminal.com
    description: prd

security:
  - BearerAuth: []

tags:
  - name: account
  - name: space
  - name: auth
  - name: role
paths:
  /verifications-codes:
    post:
      tags:
        - auth
      summary: Create verification code
      description: Create verification code
      operationId: createVerificationCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVerificationCodeReq"
      responses:
        "204":
          description: successful operation
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /accounts:
    post:
      tags:
        - account
      summary: Create account
      description: Create account
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountReq"
      responses:
        "204":
          description: successful operation
        "409":
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "403":
          description: Verification code is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /accounts/password:
    put:
      tags:
        - account
      summary: Update password
      description: Update password
      operationId: updatePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordReq"
      responses:
        "204":
          description: successful operation
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /accounts/sessions:
    post:
      tags:
        - account
      summary: Login
      description: Login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginReq"
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /accounts/me:
    get:
      tags:
        - account
      summary: Get Account Info
      description: Get Account Info
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
  /spaces:
    post:
      tags:
        - space
      summary: Create Space
      description: Create Space
      operationId: createSpace
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSpaceReq"
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
    get:
      tags:
        - space
      summary: Get Spaces
      description: Get Spaces
      operationId: listSpaces
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: size
          in: query
          schema:
            type: integer
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceList"
  /spaces/{spaceId}:
    get:
      tags:
        - space
      summary: Get Space
      description: Get Space
      operationId: getSpace
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    delete:
      tags:
        - space
      summary: Delete Space
      description: Delete Space
      operationId: deleteSpace
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "204":
          description: successful operation
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /spaces/{spaceId}/roles:
    get:
      tags:
        - role
      summary: Get Roles by Space ID
      description: Get Roles by Space ID
      operationId: listRoles
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
    post:
      tags:
        - role
      summary: Create Role
      description: Create Role
      operationId: createRole
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleReq"
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /spaces/{spaceId}/payment-gateways:
    get:
      tags:
        - payment
      summary: Get Payment Gateways
      description: Get Payment Gateways
      operationId: listPaymentGateways
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/spaceId"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentGateway"
    post:
      tags:
        - payment
      summary: Create Payment Gateway
      description: Create Payment Gateway
      operationId: createPaymentGateway
      parameters:
        - $ref: "#/components/parameters/spaceId"
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePaymentGatewayReq"
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGateway"
  /roles/{roleId}:
    get:
      tags:
        - role
      summary: Get Roles
      description: Get Roles
      operationId: getRoles
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
        - role
      summary: Delete Role
      description: Delete Role
      operationId: deleteRole
      security:
        - BearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: successful operation
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /roles/{roleId}/members:
    get:
      tags:
        - role
      summary: Get Members by Role ID
      description: Get Members by Role ID
      operationId: listMembers
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/roleId"
        - name: page
          in: query
          schema:
            type: integer
        - name: size
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              $ref: "#/components/schemas/AccountList"
  /roles/{roleId}/subscription-tiers:
    post:
      tags:
        - role
      summary: Get Permissions by Role ID
      description: Get Permissions by Role ID
      operationId: listPermissions
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/roleId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSubscriptionTierReq"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
    get:
      tags:
        - role
      summary: Get Permissions by Role ID
      description: Get Permissions by Role ID
      operationId: listSubscriptionsTiers
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/roleId"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubscriptionTier"
  /subscription-tiers/{tierId}:
    get:
      tags:
        - role
      summary: Get Subscription Tier
      description: Get Subscription Tier
      operationId: getSubscriptionTier
      security:
        - BearerAuth: []
      parameters:
        - name: tierId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionTier"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /subscription-tiers/{tierId}/payments:
    post:
      tags:
        - role
      summary: Create Subscription Tier
      description: Create Subscription Tier
      operationId: createSubscriptionTierPayment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionTier"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorMessage:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    AccountType:
      type: string
      enum:
        - user
        - admin
    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        type:
          $ref: "#/components/schemas/AccountType"
    AccountList:
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
        list:
          type: array
          items:
            $ref: "#/components/schemas/Account"
    ResetPasswordReq:
      type: object
      properties:
        email:
          type: string
        oldPassword:
          type: string
        password:
          type: string
        verificationCode:
          type: string
      required:
        - email
        - password
    LoginReq:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResp:
      type: object
      properties:
        token:
          type: string
    CreateVerificationCodeReq:
      type: object
      properties:
        email:
          type: string
    CreateAccountReq:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        verificationCode:
          type: string
      required:
        - email
        - password
    Space:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        parentId:
          type: string
          format: uuid
      required:
        - id
        - name
    SpaceList:
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
        list:
          type: array
          items:
            $ref: "#/components/schemas/Space"
    CreateSpaceReq:
      type: object
      properties:
        name:
          type: string
        parentId:
          type: string
          format: uuid
      required:
        - name
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
      required:
        - id
        - name
    Permission:
      type: object
      properties:
        method:
          type: string
        url:
          type: string
      required:
        - method
        - url
    CreateRoleReq:
      type: object
      properties:
        title:
          type: string
      required:
        - title
    PaymentGatewayProvider:
      type: string
      enum:
        - stripe
    CreatePaymentGatewayReq:
      type: object
      properties:
        provider:
          $ref: "#/components/schemas/PaymentGatewayProvider"
        title:
          type: string
        key:
          type: string
    PaymentGateway:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        provider:
          $ref: "#/components/schemas/PaymentGatewayProvider"
    SubscriptionMode:
      type: string
      enum:
        - single
        - multiple
    CreateSubscriptionTierReq:
      type: object
      properties:
        title:
          type: string
        price:
          type: integer
        currency:
          type: string
        mode:
          $ref: "#/components/schemas/SubscriptionMode"
        paymentGatewayId:
          type: string
          format: uuid
      required:
        - title
        - role
        - mode
        - paymentGatewayId
    SubscriptionTier:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        role:
          $ref: "#/components/schemas/Role"
        price:
          type: number
        currency:
          type: string
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
    roleId:
      name: roleId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    spaceId:
      name: spaceId
      in: path
      required: true
      schema:
        type: string
        format: uuid